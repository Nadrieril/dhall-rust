parser:
./a%20b
./"a%20b"
text interpolation and escapes
projection by expression unit tests
x.({ a : Bool, b })
x.({ a })
x.{ a : Bool }
s/QuotedVariable/VariableQuoted/
From https://github.com/dhall-lang/dhall-lang/issues/280 :
    "${ not_really_an_expression ;-) }"
    ''${ not_an_expression ;-) }''
    {- {- -} 1
{ x = 0 } with x = 1 + 1

import:
failure/
    don't recover cycle
    don't resolve symlinks in canonicalizing
as Text hash
as Location hash

normalization:
move builtins and operators in their own folder ?
RecordSortFields { b = 1, a = 0 }
RecordTypeSortFields { b : Bool, a : Natural }

type-inference:
something that involves destructuring a recordtype after merge
add some of the more complicated Prelude tests back, like List/enumerate
failure/
    \(_: Bool) -> assert : (\(_: Bool) -> _) === (\(x: Bool) -> _)
    merge { x = λ(x : Bool) → x } (< x: Bool | y: Natural >.x True)
    merge { x = λ(_ : Bool) → _, y = 1 } < x = True | y >
    merge { x = True, y = 1 } < x | y >.x
    merge {x=...,y=...} <x>.x
    merge {x=...,y=...} <x:T>.x

equivalence:
